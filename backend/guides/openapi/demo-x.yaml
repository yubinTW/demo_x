openapi: 3.0.0
info:
  title:  API spec of X
  description: Some API spec of x for handling data transfer between frontend and backend
  version: 0.0.1
servers:
  - url: http://{apiUrl}
    description: API endpoint of backend
paths:
  /productsuite:
    get:
      tags:
        - "Product Suite"
      summary: return list of product suite
      description: return all product suite user can view or own.
      responses:
        '200':
          description: A JSON Array of product suite infos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductSuite'
  /productsuite/{psId}/api:
    get:
      tags:
          - "Product Suite"
      summary: return list of API under product suite
      description: return all API under the product suite.
      parameters:
        - name: psId
          in: path
          required: true
          description: the Product Suite ID of the target API list 
          schema:
            type: string
      responses:
        '200':
          description: A JSON Array of API infos
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/API'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /api:
    post:
      tags:
          - "API"
      summary: register a new API.
      description: register a new API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/API'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/API'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
  /api/{apiId}:
    get:
      tags:
          - "API"
      summary: return API info JSON format
      description: Get the detail infomation of a specific API according to apiId. 
      parameters:
        - in: path
          name: apiId
          schema:
            type: string
          required: true
          description: The ID of the API
      responses:
        '200':
          description: Successfully get the detail information of the API
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/API'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
    delete:
      tags:
          - "API"
      summary: delete specific API
      description: delete specific API based on apiId
      parameters:
        - in: path
          name: apiId
          schema:
            type: string
          required: true
          description: The ID of the API
      responses:
        '204':
          description: delete operation success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
    put:
      tags:
          - "API"
      summary: update api infos
      description: update api infos
      parameters:
        - in: path
          name: apiId
          schema:
            type: string
          required: true
          description: The ID of the API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/API' 
      responses:
        '200':
          description: update operation success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /api/{apiId}/subscriber:
    get:
      tags:
          - "API"
      summary: return list of subscriber under specific api.
      description: return list of subscriber under specific api.
      parameters:
      - name: apiId
        in: path
        required: true
        description: the API ID of the target subscriber list 
        schema:
          type: string
      responses:
        '200':
          description: A JSON Array of API subscribers.
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: string
                example: ['subscriber01','subscriber02','subscriber03']
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
    put:
      tags:
          - "API"
      summary: update list of subscriber under specific api.
      description: update list of subscriber under specific api.
      parameters:
      - name: apiId
        in: path
        required: true
        description: the API ID of the target subscriber list 
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ['subscriber01','subscriber02','subscriber03']
      responses:
        '200':
          description: update success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /forms:
    get:
      tags:
        - "Form"
      summary: return list of forms
      description: return all forms user can view or own.
      responses:
        '200':
          description: A JSON Array of forms infos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Form'
    post:
      tags:
        - "Form"
      summary: Add a form
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      responses:
        '201':
          description: Add a form successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
  /form/{formId}:
    get:
      tags:
        - "Form"
      summary: return info of form
      parameters:
        - name: formId
          in: path
          required: true
          description: form ID
          schema:
            type: string
      responses:
        '200':
          description: get info successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
    put:
      tags:
        - "Form"
      summary: update a form
      parameters:
        - name: formId
          in: path
          required: true
          description: form ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      responses:
        '200':
          description: update a form successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - "Form"
      summary: delete a form
      parameters:
        - name: formId
          in: path
          required: true
          description: form ID
          schema:
            type: string
      responses:
        '204':
          description: delete a form successfully
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  /subscribe:
    post:
      summary: user subscribe a API.
      description: user subscribe a API.
      deprecated: true
      parameters:
        - name: apiId
          in: query
          required: true
          schema:
            type: string
          description: The ID of the API.
        - name: subscriberId
          in: query
          required: true
          schema:
            type: string
          description: The ID of the subscriber.
      responses:
        '200':
          description: user subscribe a API successfully.
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
  /subscribe/{apiId}/{subscriberId}:
    delete:
      summary: user cancel a API subscription.
      description: user cancel a API subscription.
      deprecated: true
      parameters:
        - name: apiId
          in: path
          required: true
          description: API ID
          schema:
            type: string
        - name: subscriberId
          in: path
          required: true
          description: subscriber ID
          schema:
            type: string
      responses:
        '204':
          description: The subscription was deleted successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'

components:
  schemas:
    ProductSuite:
      type: object
      properties:
        id:
          type: string
          description: The productSuite ID.
        name:
          type: string
          description: The productSuite name.
        apiList:
          type: array
          description: Array of API under product suite.
          items:
            $ref: '#/components/schemas/API'
      required:
        - id
    API:
      type: object
      properties:
        id:
          type: string
          description: The ID of the API
        name:
          type: string
          description: The name of the API
        apiOwner:
          type: string
          description: The own of the API
        docs:
          type: string
          description: Async API YAML string of the API
      required:
        - id
    Form:
      type: object
      properties:
        _id:
          type: string
          description: Form ID
        apiId:
          type: string
          description: API ID
        subscriberId:
          type: string
          description: Subscriber ID
        submitUser:
          type: string
          description: the ID of who create this form
        status:
          type: string
          description: status of a form
        approver:
          type: string
          description: the ID of who approve this form
        approveDate:
          type: string
          format: date-time
          description: approve time of this form
          example: "2021-06-08T07:17:40.541Z"
        comment:
          type: string
          description: comment of this form
        createdAt:
          type: string
          format: date-time
          description: create time of this form
          example: "2021-06-08T07:17:40.541Z"
        updatedAt:
          type: string
          format: date-time
          description: update time of this form
          example: "2021-06-08T07:17:40.541Z"
      required:
        - _id, apiId, subscriberId, submitUser, status
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  responses:
    BadRequest:
      description: Request is invalid (include invalid JSON data or invalid fields)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'